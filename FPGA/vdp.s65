    .setcpu "6502"
    .include "zeropage.inc65"
    .include "io.inc65"
    .include "macros.inc65"

    .export vdp_init
    .export vdp_send_instruction
    .export vdp_set_location
    .export vdp_print_buffer
    .export vdp_print_char
    .export vdp_puts
    .export vdp_putc

    .bss
    VDP_BUFFER_LENGTH = 40
vdp_buffer:
    .res VDP_BUFFER_LENGTH + 1, 0

    .code
    E    = %00000001      ; write enable
    DW   = %00000000      ; send data to vram
    REG0 = %00000010      ; send instruction to status register
    REG1 = %00000110      ; send instruction to address register


;;;;; Initialize VIA and FPGA
vdp_init:
    ; set VIA inputs/outputs
    lda #%11111111
    sta VIA1_DDRA
    lda #%00000111
    sta VIA1_DDRB

    ; reset pointer for VDP buffer
    lda #0
    sta ptr1

;;;;; empty the VDP buffer
    ldx #0
@loop3:
    lda #$20
    sta vdp_buffer,x
    inx
    cpx #VDP_BUFFER_LENGTH
    bne @loop3
;;;;;

;;;;; fill VRAM with spaces (1200 positions)
    lda #0
    jsr vdp_set_location
    ldx #0
    ldy #0
@loop1:
    lda #$20       ; copy  ascii space to vram
    jsr vdp_print_char
    inx
    cpx #$ff
    bne @loop1
    ldx #$0
    iny
    cpy #$04
    bne @loop1
    ldx #0
@loop12:
    lda #$20       ; copy  ascii space to vram
    jsr vdp_print_char
    inx
    cpx #$b2
    bne @loop12
;;;;;

    lda #0
    sta DISPLAY_PTR

    ; enable vdp
    lda #%11000000            ; display_on/int_enbl/X/X/X/X/X/X
    jsr vdp_send_instruction  ; send instruction to Status register

    rts
;;;;; end vdp_init

vdp_send_instruction:
    sta VIA1_ORA
    lda #REG0           ; set status register and clear E bit
    sta VIA1_ORB
    lda #(REG0 | E)    ; send instruction
    sta VIA1_ORB
    lda #REG0           ; clear E bit
    sta VIA1_ORB
    rts
;;;;;

vdp_set_location:
    sta VIA1_ORA
    lda #REG1           ; set address register and clear E bit
    sta VIA1_ORB
    lda #(REG1 | E)    ; send instruction
    sta VIA1_ORB
    lda #REG1           ; clear E bit
    sta VIA1_ORB
    rts
;;;;;

;;;;; copy vdp buffer to vram
vdp_print_buffer:
    phax
    ldx #0
@loop2:
    cpx ptr1
    beq @endBuffer
    lda vdp_buffer,x        ; copy ascii char to vram
    jsr vdp_print_char
    inx
    jmp @loop2
@endBuffer:
    lda #0          ; vdp buffer ptr to 0
    sta ptr1
    plax
    rts
;;;;;

vdp_print_char:
    ;pha
    ; set char address
    ;lda DISPLAY_PTR
    ;jsr vdp_set_location
    ;pla
    sta VIA1_ORA
    lda #DW                  ; clear E bit
    sta VIA1_ORB
    lda #(DW | E)            ; send data
    sta VIA1_ORB
    lda #DW                  ; clear E bit
    sta VIA1_ORB
    ;inc DISPLAY_PTR
    rts

vdp_puts:
    jsr vdp_disable_interrupt
    phaxy
    ldx ptr1
    ldy #0
@next_char:
    lda (R0),y
    beq @endText
    sta vdp_buffer,x
    iny
    inx
    jmp @next_char
@endText:
    txa
    sta ptr1
    plaxy
    jsr vdp_enable_interrupt
    rts

vdp_enable_interrupt:
    pha
    lda #%11000000
    jsr vdp_send_instruction
    pla
    rts

vdp_disable_interrupt:
    pha
    lda #%10000000
    jsr vdp_send_instruction
    pla
    rts

vdp_putc:
    sta vdp_buffer,y
    rts