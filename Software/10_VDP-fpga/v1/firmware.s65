    .setcpu "6502"
    .include "zeropage.inc65"
    .include "macros.inc65"
    .include "io.inc65"
    .include "acia.inc65"

    E  = %00000001      ; write enable
    DW = %00000000      ; send data to vram
    SR = %00000010      ; send instruction to status register


    .segment "VECTORS"
    .word   nmi
    .word   reset
    .word   irq

    .bss
    VDP_BUFFER_LENGTH = 40
vdp_buffer:
    .res VDP_BUFFER_LENGTH + 1, 0

    .code
reset:
    jmp main
nmi:
    phax
    jsr vdp_print_buffer
    plax
    rti
irq:
    rti

main:
    ; interrupt disable
    sei
    ; initialize stack pointer to $01FF
    ldx #$ff
    txs
    ; initialize ACIA
    ;jsr acia_init

    ; set VIA inputs/outputs
    lda #%11111111
    sta VIA1_DDRA
    lda #%00000011
    sta VIA1_DDRB

    ; reset pointer for VDP buffer
    lda #0
    sta ptr1

;;;;; empty the VDP buffer
    ldx #0
@loop3:
    lda #$20
    sta vdp_buffer,x
    inx
    cpx #VDP_BUFFER_LENGTH
    bne @loop3
;;;;;

;;;;; fill VRAM with spaces (1200 positions)
    ldx #0
    ldy #0
@loop1:
    lda #$20       ; copy  ascii space to vram
    jsr vdp_print_char
    inx
    cpx #$ff
    bne @loop1
    ldx #$0
    iny
    cpy #$04
    bne @loop1
    ldx #0
@loop12:
    lda #$20       ; copy  ascii space to vram
    jsr vdp_print_char
    inx
    cpx #$af
    bne @loop12
;;;;;


;;;;; fill VDP buffer with text message
    ldx #0
@fillBuff:
    lda text,x
    beq @endText
    sta vdp_buffer,x
    inx
    txa
    sta ptr1
    jmp @fillBuff
@endText:
;;;;;

;;;;; enable vdp
    lda #%11000000    ; send instruction to Status register 
    sta VIA1_ORA      ; display_on/int_enbl/X/X/X/X/X/X

    lda #SR           ; set status register and clear E bit
    sta VIA1_ORB
    lda #(SR | E)    ; send instruction
    sta VIA1_ORB
    lda #SR           ; clear E bit
    sta VIA1_ORB
;;;;;

mainLoop:
    ;jsr acia_gets
    jmp mainLoop


;;;;; copy vdp buffer to vram
vdp_print_buffer:
    ldx #0
@loop2:
    cpx ptr1
    beq @endBuffer
    lda vdp_buffer,x        ; copy ascii char to vram
    jsr vdp_print_char
    inx
    jmp @loop2
@endBuffer:
    lda #0          ; vdp buffer ptr to 0
    sta ptr1
    rts
;;;;;

vdp_print_char:
    sta VIA1_ORA
    lda #0                  ; clear E bit
    sta VIA1_ORB
    lda #E                  ; send data
    sta VIA1_ORB
    lda #0                  ; clear E bit
    sta VIA1_ORB
    rts

text:            .asciiz "Coucou!"